{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-24T12:38:15.482Z",
    "end": "2023-05-24T12:38:15.543Z",
    "duration": 61,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e42a1f7a-d05a-4cd5-adf2-fb8d7a559a1e",
      "title": "",
      "fullFile": "D:\\EslintApigee\\test\\test.apigee.js",
      "file": "\\test.apigee.js",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "contextGetVariableMethod = sinon.stub(context, 'getVariable');\ncontextSetVariableMethod = sinon.stub(context, 'setVariable');\n//sinon.spy(object, \"method\") creates a spy that wraps the existing function object.method. The spy will behave exactly like the original method (including when used as a constructor)\nrequestConstructor = sinon.spy(global, 'Request');\nhttpClientSendMethod = sinon.spy(httpClient, 'send');",
          "err": {},
          "uuid": "3c00e948-732a-49ab-a435-f1baded8c276",
          "parentUUID": "e42a1f7a-d05a-4cd5-adf2-fb8d7a559a1e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "contextGetVariableMethod.restore();\ncontextSetVariableMethod.restore();\nrequestConstructor.restore();\nhttpClientSendMethod.restore();",
          "err": {},
          "uuid": "fb1fa2b9-5cf3-4d87-824e-63e0aa151940",
          "parentUUID": "e42a1f7a-d05a-4cd5-adf2-fb8d7a559a1e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "aec1556d-5b34-42a6-b50e-7f5854b8b741",
          "title": "feature: Testing the Request function",
          "fullFile": "D:\\EslintApigee\\test\\test.apigee.js",
          "file": "\\test.apigee.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log success responses correctly",
              "fullTitle": "feature: Testing the Request function should log success responses correctly",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//withArgs Stubs the method only for the provided arguments.\ncontextGetVariableMethod.withArgs('organization.name').returns('org1');\ncontextGetVariableMethod.withArgs('environment.name').returns('env1');\ncontextGetVariableMethod.withArgs('response.status.code').returns('200');\n\n\nvar errorThrown = false;\ntry { requireUncached(jsFile);} catch (e) { errorThrown = true; }\nexpect(errorThrown).to.equal(false);\n        // to test that httpClient and request method was called for the apigee.js file once \n// calledOnce - Passes if spy was called once and only once.\nexpect(httpClientSendMethod.calledOnce).to.be.true;  // true.to.be.true\nexpect(requestConstructor.calledOnce).to.be.true;\n//var temp = contextSetVariableMethod.getCall(0);\n//calledOnce boolean property and the returned objectâ€™s args property.\nvar requestConstructorArgs = requestConstructor.args[0];\nconsole.log(requestConstructorArgs);\n//expect(temp.args[0]).to.equal('validateResponseType.isValid');\nexpect(requestConstructorArgs[0]).to.equal('https://loggly.com/aaa');\t\t\nexpect(requestConstructorArgs[1]).to.equal('POST');\t\t\nexpect(requestConstructorArgs[2]['Content-Type']).to.equal('application/json');\t\t\nvar logObject = JSON.parse(requestConstructorArgs[3]);\nconsole.log(logObject);\nexpect(logObject.org).to.equal('org1');\t\t\nexpect(logObject.env).to.equal('env1');\t\t\nexpect(logObject.responseCode).to.equal(200);\t\t\nexpect(logObject.isError).to.be.false;\nexpect(logObject).to.not.have.property('errorMessage');",
              "err": {},
              "uuid": "48bd4ab9-4147-4a4f-91de-a978ebf3ccbf",
              "parentUUID": "aec1556d-5b34-42a6-b50e-7f5854b8b741",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log failure responses correctly",
              "fullTitle": "feature: Testing the Request function should log failure responses correctly",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "contextGetVariableMethod.withArgs('organization.name').returns('org1');\ncontextGetVariableMethod.withArgs('environment.name').returns('env1');\ncontextGetVariableMethod.withArgs('response.status.code').returns('400');\ncontextGetVariableMethod.withArgs('flow.error.message').returns('this is a helpful error message');\n\nvar errorThrown = false;\ntry { requireUncached(jsFile);} catch (e) { errorThrown = true; }\n\nexpect(errorThrown).to.equal(false);\n\nexpect(httpClientSendMethod.calledOnce).to.be.true;\nexpect(requestConstructor.calledOnce).to.be.true;\nvar requestConstructorArgs = requestConstructor.args[0];\nexpect(requestConstructorArgs[0]).to.equal('https://loggly.com/aaa');\t\t\nexpect(requestConstructorArgs[1]).to.equal('POST');\t\t\nexpect(requestConstructorArgs[2]['Content-Type']).to.equal('application/json');\t\t\nvar logObject = JSON.parse(requestConstructorArgs[3]);\nexpect(logObject.org).to.equal('org1');\t\t\nexpect(logObject.env).to.equal('env1');\t\t\nexpect(logObject.responseCode).to.equal(400);\t\t\nexpect(logObject.isError).to.be.true;\nexpect(logObject.errorMessage).to.equal('this is a helpful error message');",
              "err": {},
              "uuid": "0fdfc35e-c6e1-4fd2-96b0-cea1d610a86a",
              "parentUUID": "aec1556d-5b34-42a6-b50e-7f5854b8b741",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48bd4ab9-4147-4a4f-91de-a978ebf3ccbf",
            "0fdfc35e-c6e1-4fd2-96b0-cea1d610a86a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}